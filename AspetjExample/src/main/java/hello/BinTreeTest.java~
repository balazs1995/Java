package BinTree;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;


public class BinTreeTest {

	static boolean isComment = false;
	static BinTree binTree = new BinTree();
	static final int bitmask = 128;
	static String data = "";
	static int bitCounter = 0;

/*
	static void bitCalc() {
			String[] array = data.split("0101");
			for(String currentBits: array) {
					++bitCounter;
			}
		}*/

S	static void bitCalc() {
		String[] array = data.split("0101");
		bitCounter = array.length;
	}


	static void giveElement(int readChar) { // Ezt csak akkor hívjuk meg, ha érvényes karaktert olvastunk
		for (int i = 0; i < 8; ++i) {
					if ((readChar & bitmask) == bitmask) {
						data += '1';
						binTree.addElement('1');
					} else {
						data += '0';
						binTree.addElement('0');
					}
					readChar <<= 1;
				}
			}


	public static void printOut(String outputFileName) throws IOException {

		BufferedWriter output = new BufferedWriter(new FileWriter(outputFileName));
		binTree.writeOut(output, binTree.getRoot());

		output.write("\nData:\n");
		output.write("depth = " + binTree.getDeep() + "\n");
		output.write("mean = " + String.format("%.4f", binTree.getAverage()) + "\n");
		output.write("var = " + String.format("%.5f", binTree.getDeviation()) + "\n");

		output.close();
	}


	public static boolean reading(char readChar) { // Érvényes karaktert olvastunk-e?


		boolean sign = false; // continue kiváltása
		if (readChar == '>') {
			isComment = true;
			sign = true;
		}
		if (readChar == '\n') {
			isComment = false;
			sign = true;
		}
		if (isComment || (readChar == 'N')) {
			sign = true;
		}

		return sign;

	}


	public static void start(String inputFileName) {

		char readChar = '0';
		int readInt = 0;
		boolean validCharacter = false;
		try {

			BufferedReader input = new BufferedReader(new FileReader(inputFileName));

			while ((readInt = input.read()) != -1) {
				readChar = (char) readInt;



				validCharacter = reading(readChar);
					if (validCharacter == false) {
					giveElement(readInt);
				}
			}

			input.close();

		} catch (IOException ex) {
			ex.printStackTrace();
		}

	}



	public static void main(String[] args) {



		if (args.length != 2) {
			System.err.println("java BinTree inputFileName outputFileName");
			return;
		}


		try {

			start(args[0]);
			printOut(args[1]);

		} catch (IOException ex) {
			ex.printStackTrace();
		}

		bitCalc();
		System.out.println(bitCounter + " ilyen jellegű bitsorozat van a fában");

	}
}
